name: Promote Vercel to GitHub Production

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      sha:
        description: "Commit SHA to mirror (optional; defaults to current)"
        required: false

permissions:
  contents: read
  deployments: write

jobs:
  promote:
    runs-on: ubuntu-latest
    steps:
      - name: Mirror Vercel deployment to GitHub Production
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = core.getInput('sha') || context.sha;

            // Poll for the Vercel-created deployment for this commit
            const maxAttempts = 30; // ~5 minutes at 10s intervals
            const delayMs = 10000;

            async function sleep(ms){ return new Promise(r => setTimeout(r, ms)); }

            async function findVercelDeployment() {
              for (let attempt = 1; attempt <= maxAttempts; attempt++) {
                const { data } = await github.request('GET /repos/{owner}/{repo}/deployments', {
                  owner,
                  repo,
                  per_page: 100,
                });

                const candidates = data.filter(d => d.ref === sha && d.creator && d.creator.login === 'vercel[bot]');
                if (candidates.length) {
                  candidates.sort((a,b) => new Date(b.created_at) - new Date(a.created_at));
                  return candidates[0];
                }
                core.info(`Attempt ${attempt}/${maxAttempts}: No Vercel deployment for ${sha} yet. Waiting ${delayMs/1000}s...`);
                await sleep(delayMs);
              }
              return null;
            }

            const vercelDeployment = await findVercelDeployment();
            if (!vercelDeployment) {
              core.notice('No Vercel deployment found for this commit after waiting. Skipping mirror.');
              return; // exit gracefully; do not fail the job
            }

            // Get the deployment URL from statuses
            const statuses = await github.request(
              'GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses',
              { owner, repo, deployment_id: vercelDeployment.id }
            );
            const success = statuses.data.find(s => s.state === 'success') || statuses.data[0];
            const vercelUrl = (success && (success.environment_url || success.target_url || success.log_url)) || '';

            core.info(`Vercel deployment ${vercelDeployment.id} (${vercelDeployment.environment}) -> ${vercelUrl}`);

            // Create canonical GitHub Production deployment
            const createResp = await github.request('POST /repos/{owner}/{repo}/deployments', {
              owner,
              repo,
              ref: sha,
              environment: 'Production',
              description: `Vercel: ${vercelDeployment.environment}`,
              auto_merge: false,
              required_contexts: [],
              production_environment: true,
              transient_environment: false
            });

            const deploymentId = createResp.data.id;

            await github.request('POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses', {
              owner,
              repo,
              deployment_id: deploymentId,
              state: 'success',
              environment: 'Production',
              environment_url: vercelUrl || undefined,
              target_url: vercelUrl || undefined,
              log_url: vercelUrl || undefined,
              description: 'Deployment has completed on Vercel'
            });

            core.info(`Created GitHub Production deployment ${deploymentId} -> ${vercelUrl}`);
