rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper: user is authenticated
    function isAuthenticated() { return request.auth != null; }
    // Helper: auth uid matches provided uid (path param)
    function isOwnerUid(uid) { return isAuthenticated() && request.auth.uid == uid; }
    // Helper: auth uid matches resource.data.userId (existing doc)
    function isOwnerResource() { return isAuthenticated() && request.auth.uid == resource.data.userId; }
    // Helper: auth uid matches request.resource.data.userId (incoming write)
    function isOwnerRequest() { return isAuthenticated() && request.auth.uid == request.resource.data.userId; }

    // Trips collection - users can only access their own trips
    match /trips/{document} {
      allow create: if isOwnerRequest();
      allow read, update, delete: if isOwnerResource();
    }

    // Weather logs collection - users can only access their own weather logs
    match /weatherLogs/{document} {
      allow create: if isOwnerRequest();
      allow read, update, delete: if isOwnerResource();
    }

    // Fish caught collection - users can only access their own fish records
    match /fishCaught/{document} {
      allow create: if isOwnerRequest();
      allow read, update, delete: if isOwnerResource();
    }

    // Tackle items collection - users can only access their own tackle box
    match /tackleItems/{document} {
      allow create: if isOwnerRequest();
      allow read, update, delete: if isOwnerResource();
    }

    // User settings collection - users can only access their own settings
    // Use path param for read so it works even if the document doesn't exist yet
    match /userSettings/{userId} {
      // Reads allowed by path ownership (doc may not exist yet)
      allow read: if isOwnerUid(userId);
      // Create/update require path ownership AND consistent userId in payload
      allow create: if isOwnerUid(userId) && request.resource.data.userId == userId;
      allow update: if isOwnerUid(userId) && request.resource.data.userId == userId;
      // Delete allowed by path ownership (covers legacy docs without userId field)
      allow delete: if isOwnerUid(userId);
    }

    // Gear types collection - users can only access their own gear types
    match /gearTypes/{document} {
      allow create: if isOwnerRequest();
      allow get, update, delete: if isOwnerResource();
      allow list: if isAuthenticated();
    }

    // Allow read access to public data (if any)
    match /public/{document} {
      allow read: if true;
      allow write: if false;
    }
  }
}