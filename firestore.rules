rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Trips collection - users can only access their own trips
    match /trips/{document} {
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if isAuthenticated() &&
        request.auth.uid == resource.data.userId;
    }

    // Weather logs collection - users can only access their own weather logs
    match /weatherLogs/{document} {
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if isAuthenticated() &&
        request.auth.uid == resource.data.userId;
    }

    // Fish caught collection - users can only access their own fish records
    match /fishCaught/{document} {
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if isAuthenticated() &&
        request.auth.uid == resource.data.userId;
    }

    // Tackle items collection - users can only access their own tackle box
    match /tackleItems/{document} {
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if isAuthenticated() &&
        request.auth.uid == resource.data.userId;
    }

    // User settings collection - users can only access their own settings
    // Use path param for read so it works even if the document doesn't exist yet
    match /userSettings/{userId} {
      // Read allowed for the owner by path (works even when doc doesn't yet exist)
      allow read: if isAuthenticated() && request.auth.uid == userId;

      // Create requires the userId in the payload to match the path and auth user
      allow create: if isAuthenticated() &&
        request.auth.uid == userId && request.resource.data.userId == userId;

      // Update requires ownership and consistent userId in payload
      allow update: if isAuthenticated() &&
        request.auth.uid == userId && request.resource.data.userId == userId;

      // Delete requires ownership; allow if auth uid matches path param (safe, doc id == userId)
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Gear types collection - users can only access their own gear types
    match /gearTypes/{document} {
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.userId;
      allow get, update, delete: if isAuthenticated() &&
        request.auth.uid == resource.data.userId;
      allow list: if isAuthenticated();
    }

    // Allow read access to public data (if any)
    match /public/{document} {
      allow read: if true;
      allow write: if false;
    }
  }
}